CREATE TABLE USERS (
    USER_ID INTEGER NOT NULL PRIMARY KEY,
    FIRST_NAME VARCHAR2(100) NOT NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    YEAR_OF_BIRTH INTEGER,
    MONTH_OF_BIRTH INTEGER,
    DAY_OF_BIRTH INTEGER,
    GENDER VARCHAR2(100)
);

CREATE TABLE FRIENDS (
    USER1_ID INTEGER NOT NULL,
    USER2_ID INTEGER NOT NULL,
    PRIMARY KEY (USER1_ID, USER2_ID),
    CONSTRAINT UNIQUE_PAIR UNIQUE (USER2_ID, USER1_ID),
    CHECK (USER1_ID != USER2_ID)
);

CREATE TABLE CITIES (
    CITY_ID INTEGER NOT NULL PRIMARY KEY,
    CITY_NAME VARCHAR2(100) NOT NULL,
    STATE_NAME VARCHAR2(100) NOT NULL,
    COUNTRY_NAME VARCHAR2(100) NOT NULL,
    CONSTRAINT UNIQUE_TRIO UNIQUE (CITY_NAME, STATE_NAME, COUNTRY_NAME)
);

CREATE TABLE USER_CURRENT_CITIES (
    USER_ID INTEGER NOT NULL,
    CURRENT_CITY_ID INTEGER NOT NULL,
    PRIMARY KEY USER_ID
);

CREATE TABLE USER_HOMETOWN_CITIES (
    USER_ID INTEGER NOT NULL,
    HOMETOWN_CITY_ID INTEGER NOT NULL,
    PRIMARY KEY USER_ID
);

CREATE TABLE MESSAGES (
    MESSAGE_ID INTEGER NOT NULL PRIMARY KEY,
    SENDER_ID INTEGER NOT NULL,
    RECEIVER_ID INTEGER NOT NULL,
    MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
    SENT_TIME TIMESTAMP NOT NULL
);

CREATE TABLE PROGRAMS (
    PROGRAM_ID INTEGER NOT NULL PRIMARY KEY,
    INSTITUTION VARCHAR2(100) NOT NULL,
    CONCENTRATION VARCHAR2(100) NOT NULL,
    DEGREE VARCHAR2(100) NOT NULL
    CONSTRAINT UNIQUE_TRIO UNIQUE (INSTITUTION, CONCENTRATION, DEGREE)
);

CREATE TABLE EDUCATION (
    USER_ID INTEGER NOT NULL,
    PROGRAM_ID INTEGER NOT NULL,
    PROGRAM_YEAR INTEGER NOT NULL,
    PRIMARY KEY (USER_ID, PROGRAM_ID)
);

CREATE TABLE USER_EVENTS (
    EVENT_ID INTEGER NOT NULL UNIQUE,
    EVENT_CREATOR_ID INTEGER NOT NULL,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE VARCHAR2(100),
    EVENT_DESCRIPTION VARCHAR2(100),
    EVENT_TYPE VARCHAR2(100),
    EVENT_SUBTYPE VARCHAR2(100),
    EVENT_ADDRESS VARCHAR2(2000),
    EVENT_CITY_ID INTEGER NOT NULL,
    EVENT_START_TIME TIMESTAMP,
    EVENT_END_TIME TIMESTAMP,
    PRIMARY KEY (EVENT_ID, EVENT_CREATOR_ID, EVENT_CITY_ID)
);

CREATE TABLE PARTICIPANTS (
    EVENT_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONFIRMATION VARCHAR2(100) NOT NULL,
    PRIMARY KEY (EVENT_ID, USER_ID),
    CHECK (CONFIRMATION IN ('ATTENDING', 'UNSURE', 'DECLINES', 'NOT_REPLIED'))
);


CREATE TABLE ALBUMS (
    ALBUM_ID INTEGER NOT NULL PRIMARY KEY,
    ALBUM_OWNER_ID INTEGER NOT NULL,
    ALBUM_NAME VARCHAR2(100) NOT NULL,
    ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
    ALBUM_MODIFIED_TIME TIMESTAMP,
    ALBUM_LINK VARCHAR2(100) NOT NULL,
    ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
    COVER_PHOTO_ID INTEGER NOT NULL,
    CHECK (ALBUM_VISIBILITY IN ('EVERYONE', 'FRIENDS', 'FRIENDS_OF_FRIENDS', 'MYSELF'))
);

CREATE TABLE PHOTOS (
    PHOTO_ID INTEGER NOT NULL PRIMARY KEY,
    ALBUM_ID INTEGER NOT NULL,
    PHOTO_CAPTION VARCHAR2(2000),
    PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
    PHOTO_MODIFIED_TIME TIMESTAMP,
    PHOTO_LINK VARCHAR2(2000) NOT NULL
);

CREATE TABLE TAGS (
    TAG_PHOTO_ID INTEGER NOT NULL,
    TAG_SUBJECT_ID INTEGER NOT NULL,
    TAG_CREATED_TIME TIMESTAMP NOT NULL,
    TAG_X INTEGER NOT NULL,
    TAG_Y INTEGER NOT NULL,
    PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID)
);

ALTER TABLE FRIENDS
ADD CONSTRAINT USER1_EXISTS FOREIGN KEY (USER1_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE FRIENDS
ADD CONSTRAINT USER2_EXISTS FOREIGN KEY (USER2_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE USER_CURRENT_CITIES
ADD CONSTRAINT UCC_USER_EXISTS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE USER_HOMETOWN_CITIES
ADD CONSTRAINT UHC_USER_EXISTS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE MESSAGES
ADD CONSTRAINT SENDER_EXISTS FOREIGN KEY (SENDER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE MESSAGES
ADD CONSTRAINT RECEIVER_EXISTS FOREIGN KEY (RECEIVER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE EDUCATION
ADD CONSTRAINT EDU_USER_EXISTS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE EDUCATION
ADD CONSTRAINT PROGRAM_EXISTS FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS (PROGRAM_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE USER_EVENTS
ADD CONSTRAINT CREATOR_EXISTS FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE PARTICIPANTS
ADD CONSTRAINT EVENT_EXISTS FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS (EVENT_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE PARTICIPANTS
ADD CONSTRAINT P_USER_EXISTS FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE ALBUMS
ADD CONSTRAINT ALB_USER_EXISTS FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE ALBUMS
ADD CONSTRAINT PHOTO_EXISTS FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS (PHOTO_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE PHOTOS
ADD CONSTRAINT ALBUM_EXISTS FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS (ALBUM_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE TAGS
ADD CONSTRAINT TAG_USER_EXISTS FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE TAGS
ADD CONSTRAINT TAG_PHOTO_EXISTS FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS (PHOTO_ID)
ON DELETE CASCADE
INITIALLY DEFERRED DEFERRABLE;

CREATE SEQUENCE CITY_ID_SEQUENCE
    START WITH 1
    INCREMENT BY 1;

CREATE TRIGGER Add_City 
    BEFORE INSERT ON CITIES 
    FOR EACH ROW
        BEGIN
            SELECT CITY_ID_SEQUENCE.NEXTVAL INTO :NEW.CITY_ID FROM DUAL; 
        END;
/

CREATE SEQUENCE PROGRAM_ID_SEQUENCE 
    START WITH 1
    INCREMENT BY 1;
CREATE TRIGGER Add_Program 
    BEFORE INSERT ON PROGRAMS 
        FOR EACH ROW
            BEGIN
                SELECT PROGRAM_ID_SEQUENCE.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL; 
            END;
/

CREATE TRIGGER Order_Friend_Pairs
    BEFORE INSERT ON FRIENDS
    FOR EACH ROW
        DECLARE temp INTEGER;
        BEGIN
            IF :NEW.USER1_ID > :NEW.USER2_ID THEN
                temp := :NEW.USER2_ID;
                :NEW.USER2_ID := :NEW.USER1_ID;
                :NEW.USER1_ID := temp;
            END IF;
        END;
/
